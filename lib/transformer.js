// Generated by CoffeeScript 1.4.0
var Transformer, stream;

stream = require('stream');

/*
Transforming data
=================

Transformation may occur synchronously or asynchronously dependending
on the provided transform callback and its declared arguments length.

Callback are called for each line and its arguments are :    

*   *data*   
  CSV record
*   *index*   
  Incremented counter
*   *callback*   
  Callback function to be called in asynchronous mode

Unless you specify the `columns` read option, `data` are provided 
as arrays, otherwise they are objects with keys matching columns 
names.

In synchronous mode, the contract is quite simple, you receive an array 
of fields for each record and return the transformed record.

In asynchronous mode, it is your responsibility to call the callback 
provided as the third argument. It must be called with two arguments,
the first one is an error if any, the second is the transformed record.

Transformed records may be an array, an associative array, a 
string or null. If null, the record will simply be skipped. When the 
returned value is an array, the fields are merged in order. 
When the returned value is an object, it will search for 
the `columns` property in the write or in the read options and 
smartly order the values. If no `columns` options are found, 
it will merge the values in their order of appearance. When the 
returned value is a string, it is directly sent to the destination 
source and it is your responsibility to delimit, quote, escape 
or define line breaks.

Transform callback run synchronously:

    csv()
    .from('82,Preisner,Zbigniew\n94,Gainsbourg,Serge')
    .to(console.log)
    .transform(function(data, index){
        return data.reverse()
    });
    // Executing `node samples/transform.js`, print:
    // 94,Gainsbourg,Serge\n82,Preisner,Zbigniew

Transform callback run asynchronously:

    csv()
    .from('82,Preisner,Zbigniew\n94,Gainsbourg,Serge')
    .to(console.log)
    .transform(function(data, index, callback){
        process.nextTick(function(){
            callback(null, data.reverse());
        });
    });
    // Executing `node samples/transform.js`, print:
    // 94,Gainsbourg,Serge\n82,Preisner,Zbigniew

Transform callback returning a string:

    csv()
    .from('82,Preisner,Zbigniew\n94,Gainsbourg,Serge')
    .to(console.log)
    .transform(function(data, index){
        return (index>0 ? ',' : '') + data[0] + ":" + data[2] + ' ' + data[1];
    });
    // Executing `node samples/transform.js`, print:
    // 82:Zbigniew Preisner,94:Serge Gainsbourg
*/


Transformer = function(csv) {
  this.csv = csv;
  return this;
};

Transformer.prototype.__proto__ = stream.prototype;

/* no doc

`transformer(csv).headers()`
----------------------------

Call a callback to transform a line. Called from the `parse` function on each 
line. It is responsible for transforming the data and finally calling `write`.
*/


Transformer.prototype.headers = function() {
  var k, label, labels;
  labels = this.csv.options.to.columns || this.csv.options.from.columns;
  if (typeof labels === 'object') {
    labels = (function() {
      var _results;
      _results = [];
      for (k in labels) {
        label = labels[k];
        _results.push(label);
      }
      return _results;
    })();
  }
  return this.csv.stringifier.write(labels);
};

/* no doc

`transformer(csv).transform(line)`
----------------------------------

Call a callback to transform a line. Called from the `parse` function on each 
line. It is responsible for transforming the data and finally calling `write`.
*/


Transformer.prototype.transform = function(line) {
  var column, columns, csv, done, finish, i, lineAsObject, self, sync, _i, _j, _len, _len1;
  self = this;
  csv = this.csv;
  if (!(csv.state.columns != null)) {
    columns = csv.options.from.columns;
    if (typeof columns === 'object' && columns !== null && !Array.isArray(columns)) {
      columns = Object.keys(columns);
    }
    if (csv.state.count === 0 && columns === true) {
      columns = csv.options.from.columns = line;
      return;
    }
    csv.state.columns = columns != null ? columns : false;
  } else {
    columns = csv.state.columns;
  }
  if (columns) {
    if (Array.isArray(line)) {
      lineAsObject = {};
      for (i = _i = 0, _len = columns.length; _i < _len; i = ++_i) {
        column = columns[i];
        lineAsObject[column] = line[i] != null ? line[i] : null;
      }
      line = lineAsObject;
    } else {
      lineAsObject = {};
      for (i = _j = 0, _len1 = columns.length; _j < _len1; i = ++_j) {
        column = columns[i];
        lineAsObject[column] = line[column] != null ? line[column] : null;
      }
      line = lineAsObject;
    }
  }
  finish = function(line) {
    if (csv.state.count === 1 && csv.options.to.header === true) {
      self.headers();
    }
    csv.stringifier.write(line);
    if (csv.state.transforming === 0 && self.closed === true) {
      return self.emit('end', csv.state.count);
    }
  };
  csv.state.count++;
  if (this.callback) {
    sync = this.callback.length !== 3;
    csv.state.transforming++;
    done = function(err, line) {
      var isObject;
      if (err) {
        return csv.error(err);
      }
      isObject = typeof line === 'object' && !Array.isArray(line);
      if (isObject && csv.options.to.newColumns && !csv.options.to.columns) {
        Object.keys(line).filter(function(column) {
          return csv.state.columns.indexOf(column) === -1;
        }).forEach(function(column) {
          return csv.state.columns.push(column);
        });
      }
      csv.state.transforming--;
      return finish(line);
    };
    if (sync) {
      try {
        return done(null, this.callback(line, csv.state.count - 1));
      } catch (err) {
        return done(err);
      }
    } else {
      return this.callback(line, csv.state.count - 1, function(err, line) {
        return done(err, line);
      });
    }
  } else {
    return finish(line);
  }
};

/* no doc
`transformer(csv).end()`
------------------------

A transformer instance extends the EventEmitter and 
emit the 'end' event when the last callback is called.
*/


Transformer.prototype.end = function() {
  if (this.closed) {
    return this.csv.error(new Error('Transformer already closed'));
  }
  this.closed = true;
  if (this.csv.state.transforming === 0) {
    return this.emit('end');
  }
};

module.exports = function(csv) {
  return new Transformer(csv);
};

module.exports.Transformer = Transformer;
